S0 = [[0x3e, 0x72, 0x5b, 0x47, 0xca, 0xe0, 0x00, 0x33, 0x04, 0xd1, 0x54, 0x98, 0x09, 0xb9, 0x6d, 0xcb],
      [0x7b, 0x1b, 0xf9, 0x32, 0xaf, 0x9d, 0x6a, 0xa5, 0xb8, 0x2d, 0xfc, 0x1d, 0x08, 0x53, 0x03, 0x90],
      [0x4d, 0x4e, 0x84, 0x99, 0xe4, 0xce, 0xd9, 0x91, 0xdd, 0xb6, 0x85, 0x48, 0x8b, 0x29, 0x6e, 0xac],
      [0xcd, 0xc1, 0xf8, 0x1e, 0x73, 0x43, 0x69, 0xc6, 0xb5, 0xbd, 0xfd, 0x39, 0x63, 0x20, 0xd4, 0x38],
      [0x76, 0x7d, 0xb2, 0xa7, 0xcf, 0xed, 0x57, 0xc5, 0xf3, 0x2c, 0xbb, 0x14, 0x21, 0x06, 0x55, 0x9b],
      [0xe3, 0xef, 0x5e, 0x31, 0x4f, 0x7f, 0x5a, 0xa4, 0x0d, 0x82, 0x51, 0x49, 0x5f, 0xba, 0x58, 0x1c],
      [0x4a, 0x16, 0xd5, 0x17, 0xa8, 0x92, 0x24, 0x1f, 0x8c, 0xff, 0xd8, 0xae, 0x2e, 0x01, 0xd3, 0xad],
      [0x3b, 0x4b, 0xda, 0x46, 0xeb, 0xc9, 0xde, 0x9a, 0x8f, 0x87, 0xd7, 0x3a, 0x80, 0x6f, 0x2f, 0xc8],
      [0xb1, 0xb4, 0x37, 0xf7, 0x0a, 0x22, 0x13, 0x28, 0x7c, 0xcc, 0x3c, 0x89, 0xc7, 0xc3, 0x96, 0x56],
      [0x07, 0xbf, 0x7e, 0xf0, 0x0b, 0x2b, 0x97, 0x52, 0x35, 0x41, 0x79, 0x61, 0xa6, 0x4c, 0x10, 0xfe],
      [0xbc, 0x26, 0x95, 0x88, 0x8a, 0xb0, 0xa3, 0xfb, 0xc0, 0x18, 0x94, 0xf2, 0xe1, 0xe5, 0xe9, 0x5d],
      [0xd0, 0xdc, 0x11, 0x66, 0x64, 0x5c, 0xec, 0x59, 0x42, 0x75, 0x12, 0xf5, 0x74, 0x9c, 0xaa, 0x23],
      [0x0e, 0x86, 0xab, 0xbe, 0x2a, 0x02, 0xe7, 0x67, 0xe6, 0x44, 0xa2, 0x6c, 0xc2, 0x93, 0x9f, 0xf1],
      [0xf6, 0xfa, 0x36, 0xd2, 0x50, 0x68, 0x9e, 0x62, 0x71, 0x15, 0x3d, 0xd6, 0x40, 0xc4, 0xe2, 0x0f],
      [0x8e, 0x83, 0x77, 0x6b, 0x25, 0x05, 0x3f, 0x0c, 0x30, 0xea, 0x70, 0xb7, 0xa1, 0xe8, 0xa9, 0x65],
      [0x8d, 0x27, 0x1a, 0xdb, 0x81, 0xb3, 0xa0, 0xf4, 0x45, 0x7a, 0x19, 0xdf, 0xee, 0x78, 0x34, 0x60]]

S1 = [[0x55, 0xc2, 0x63, 0x71, 0x3b, 0xc8, 0x47, 0x86, 0x9f, 0x3c, 0xda, 0x5b, 0x29, 0xaa, 0xfd, 0x77],
      [0x8c, 0xc5, 0x94, 0x0c, 0xa6, 0x1a, 0x13, 0x00, 0xe3, 0xa8, 0x16, 0x72, 0x40, 0xf9, 0xf8, 0x42],
      [0x44, 0x26, 0x68, 0x96, 0x81, 0xd9, 0x45, 0x3e, 0x10, 0x76, 0xc6, 0xa7, 0x8b, 0x39, 0x43, 0xe1],
      [0x3a, 0xb5, 0x56, 0x2a, 0xc0, 0x6d, 0xb3, 0x05, 0x22, 0x66, 0xbf, 0xdc, 0x0b, 0xfa, 0x62, 0x48],
      [0xdd, 0x20, 0x11, 0x06, 0x36, 0xc9, 0xc1, 0xcf, 0xf6, 0x27, 0x52, 0xbb, 0x69, 0xf5, 0xd4, 0x87],
      [0x7f, 0x84, 0x4c, 0xd2, 0x9c, 0x57, 0xa4, 0xbc, 0x4f, 0x9a, 0xdf, 0xfe, 0xd6, 0x8d, 0x7a, 0xeb],
      [0x2b, 0x53, 0xd8, 0x5c, 0xa1, 0x14, 0x17, 0xfb, 0x23, 0xd5, 0x7d, 0x30, 0x67, 0x73, 0x08, 0x09],
      [0xee, 0xb7, 0x70, 0x3f, 0x61, 0xb2, 0x19, 0x8e, 0x4e, 0xe5, 0x4b, 0x93, 0x8f, 0x5d, 0xdb, 0xa9],
      [0xad, 0xf1, 0xae, 0x2e, 0xcb, 0x0d, 0xfc, 0xf4, 0x2d, 0x46, 0x6e, 0x1d, 0x97, 0xe8, 0xd1, 0xe9],
      [0x4d, 0x37, 0xa5, 0x75, 0x5e, 0x83, 0x9e, 0xab, 0x82, 0x9d, 0xb9, 0x1c, 0xe0, 0xcd, 0x49, 0x89],
      [0x01, 0xb6, 0xbd, 0x58, 0x24, 0xa2, 0x5f, 0x38, 0x78, 0x99, 0x15, 0x90, 0x50, 0xb8, 0x95, 0xe4],
      [0xd0, 0x91, 0xc7, 0xce, 0xed, 0x0f, 0xb4, 0x6f, 0xa0, 0xcc, 0xf0, 0x02, 0x4a, 0x79, 0xc3, 0xde],
      [0xa3, 0xef, 0xea, 0x51, 0xe6, 0x6b, 0x18, 0xec, 0x1b, 0x2c, 0x80, 0xf7, 0x74, 0xe7, 0xff, 0x21],
      [0x5a, 0x6a, 0x54, 0x1e, 0x41, 0x31, 0x92, 0x35, 0xc4, 0x33, 0x07, 0x0a, 0xba, 0x7e, 0x0e, 0x34],
      [0x88, 0xb1, 0x98, 0x7c, 0xf3, 0x3d, 0x60, 0x6c, 0x7b, 0xca, 0xd3, 0x1f, 0x32, 0x65, 0x04, 0x28],
      [0x64, 0xbe, 0x85, 0x9b, 0x2f, 0x59, 0x8a, 0xd7, 0xb0, 0x25, 0xac, 0xaf, 0x12, 0x03, 0xe2, 0xf2]]


class CustomString:
    def __init__(self, value):
        self.value = str(value)

    def __xor__(self, other):
        # 自定义字符串异或运算
        result = hex(int(self.value, 16) ^ int(str(other), 16))[2:]
        return CustomString(result)

    def __str__(self):
        # 定义字符串对象的打印形式
        return self.value

    def __add__(self, other):
        # 重构加法运算符为字符串首尾拼接
        result = self.value + str(other)
        return CustomString(result)

    def mod_pow_2_32_add(self, other):
        # 两个字符串对应的值相加，并模2**32
        result = (int(self.value, 16) + int(str(other), 16)) % (2 ** 32)
        return CustomString(hex(result)[2:])

    def mod_pow_2_31_add(self, other):
        # 两个字符串对应的值相加，并模2**31-1
        result = (int(self.value, 16) + int(str(other), 16)) % (2 ** 31 - 1)
        if result == 0x7FFFFFFF:
            result = 0
        return CustomString(hex(result)[2:])

    def low_bits(self):
        # 取出一个2进制字符串的低16位（即16进制字符串低4位）-主要用于31bit字符串取位
        t = self.value[-4:]
        return CustomString(self.value[-4:])

    def high_bits(self):
        # 取出一个2进制字符串的高16位（即16进制字符串高4位）-主要用于31bit字符串取位
        binary_result = bin(int(self.value, 16))[2:].zfill(31)[:16]
        hex_result = hex(int(binary_result, 2))[2:]
        return CustomString(hex_result)

    def process_other_string(self, other_str):
        # 处理另一个字符串
        other_value = int(str(other_str.value[-1]), 16)
        flag = other_value % 2
        temp = self.value
        temp = hex(int(temp[0], 16) + flag * 8)[2:] + temp[1:]

        other_result = other_str.right_shift(1)
        return CustomString(other_result.value + temp)

    def rotate_left(self, x):
        # 循环左移 x 位
        value_int = int(self.value, 16)
        rotated_value = ((value_int << x) | (value_int >> (32 - x))) & 0xFFFFFFFF
        result = hex(rotated_value)[2:]
        return CustomString(result)

    def rotate_left_31(self, x):
        # 循环左移 x 位
        value_int = int(self.value, 16)
        rotated_value = ((value_int << x) | (value_int >> (31 - x))) & 0x7FFFFFFF
        result = hex(rotated_value)[2:]
        return CustomString(result)

    def right_shift(self, x):
        # 右移 x 位
        result = hex(int(self.value, 16) >> x)[2:]
        return CustomString(result)

    def drop_lowest_bit_and_to_str(self):
        # 舍弃字符串的二进制下最低位，然后转为字符串输出--获得31比特字u
        value_int = int(self.value, 16)
        result = hex(value_int >> 1)[2:]
        return CustomString(result)


def init_S(key, IV):
    d = [CustomString("44D7"), CustomString("26BC"), CustomString("626B"), CustomString("135E")
        , CustomString("5789"), CustomString("35E2"), CustomString("7135"), CustomString("09AF")
        , CustomString("4D78"), CustomString("2F13"), CustomString("6BC4"), CustomString("1AF1")
        , CustomString("5E26"), CustomString("3C4D"), CustomString("789A"), CustomString("47AC")]

    t = [d[i] + IV[i] for i in range(16)]
    return [t[i].process_other_string(key[i]) for i in range(16)]


def disp(str_list):
    for x in str_list:
        print(x, end=" ")
    print()


def BitReconstruction(S):
    x0 = S[15].high_bits() + S[14].low_bits()
    x1 = S[11].low_bits() + S[9].high_bits()
    x2 = S[7].low_bits() + S[5].high_bits()
    x3 = S[2].low_bits() + S[0].high_bits()
    return x0, x1, x2, x3


def L1(string):
    return string ^ string.rotate_left(2) ^ string.rotate_left(10) ^ \
        string.rotate_left(18) ^ string.rotate_left(24)


def L2(string):
    return string ^ string.rotate_left(8) ^ string.rotate_left(14) ^ \
        string.rotate_left(22) ^ string.rotate_left(30)


def S_transform(word):
    word = CustomString(word.value.zfill(8))
    string = word.value
    s0 = string[:2]
    s1 = string[2:4]
    s2 = string[4:6]
    s3 = string[6:8]
    t1 = s_box_0(s0)
    t2 = s_box_1(s1)
    t3 = s_box_0(s2)
    t4 = s_box_1(s3)
    return t1 + t2 + t3 + t4


def s_box_0(s):
    v = int(s, 16)
    return CustomString(hex(S0[v // 16][v % 16])[2:].zfill(2))


def s_box_1(s):
    v = int(s, 16)
    return CustomString(hex(S1[v // 16][v % 16])[2:].zfill(2))


def F(x0, x1, x2, R1, R2):
    t = x0 ^ R1
    W = (t).mod_pow_2_32_add(R2)
    W1 = ((R1.mod_pow_2_32_add(x1)).value).zfill(8)
    W2 = ((R2 ^ (x2)).value).zfill(8)
    R1 = S_transform(L1(CustomString(W1[-4:] + W2[:4])))
    R2 = S_transform(L2(CustomString(W2[-4:] + W1[:4])))
    return W, R1, R2


t_2_8 = 2 ** 8
t_2_15 = 2 ** 15
t_2_17 = t_2_15 * 2 * 2
t_2_20 = t_2_17 * (2 ** 3)
t_2_21 = t_2_20 * 2
t_2_31 = t_2_21 * (2 ** 10)


def LFSRWithInitialisationMode(W, S):
    # v=t_2_15*int(S[15].value,16) + t_2_17*int(S[13].value,16)+ t_2_21*int(S[10].value,16) \
    #   +t_2_20*int(S[4].value,16)+(t_2_8+1)*int(S[0].value,16)
    # v=v%(t_2_31-1)
    # s16 = (int((W.drop_lowest_bit_and_to_str()).value, 16) + v) % (t_2_31 - 1)

    t1 = S[15].rotate_left_31(15)
    t2 = S[13].rotate_left_31(17)
    t3 = S[10].rotate_left_31(21)
    t4 = S[4].rotate_left_31(20)
    t5 = (S[0].rotate_left_31(8)).mod_pow_2_31_add(S[0])
    v = (((t1.mod_pow_2_31_add(t2)).mod_pow_2_31_add(t3)).mod_pow_2_31_add(t4)).mod_pow_2_31_add(t5)
    s16 = int(((W.drop_lowest_bit_and_to_str()).mod_pow_2_31_add(v)).value, 16)

    if s16 == 0:
        s16 = (t_2_31 - 1)
    S = S[1:]
    S.append(CustomString(hex(s16)[2:]))

    return S


def LFSRWithWorkMode(S):
    # v=t_2_15*int(S[15].value,16) + t_2_17*int(S[13].value,16)+ t_2_21*int(S[10].value,16) +t_2_20*int(S[4].value,16)+(t_2_8+1)*int(S[0].value,16)
    # v=v%(t_2_31-1)

    t1 = S[15].rotate_left_31(15)
    t2 = S[13].rotate_left_31(17)
    t3 = S[10].rotate_left_31(21)
    t4 = S[4].rotate_left_31(20)
    t5 = (S[0].rotate_left_31(8)).mod_pow_2_31_add(S[0])
    v = int(((((t1.mod_pow_2_31_add(t2)).mod_pow_2_31_add(t3)).mod_pow_2_31_add(t4)).mod_pow_2_31_add(t5)).value, 16)

    s16 = v
    if s16 == 0:
        s16 = (t_2_31 - 1)
    S = S[1:]
    S.append(CustomString(hex(s16)[2:]))

    return S
